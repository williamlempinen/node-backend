generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRES")
}

model User {
  id                  Int            @id @default(autoincrement())
  username            String         @unique @db.VarChar(54)
  email               String         @unique @db.VarChar(100)
  password            String
  is_active           Boolean        @default(true)
  created_at          DateTime       @default(now()) @db.Timestamp(6)
  role                String         @default("REGULAR") @db.VarChar(20)
  profile_picture_url String?
  updated_at          DateTime       @updatedAt @db.Timestamp(6)
  asContacts          Contact[]      @relation("AsContacts")
  contacts            Contact[]      @relation("UserContacts")
  messages            Message[]      @relation("UserSentMessages")
  refreshToken        RefreshToken?  @relation("UserRefreshToken")
  conversations       Conversation[] @relation("UserConversations")

  @@index([email], map: "index_users_email")
  @@index([username], map: "index_users_username")
  @@map("users")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  token_hash String
  expires_at DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  user       User     @relation("UserRefreshToken", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "idx_refresh_tokens_user_id")
  @@map("refresh_tokens")
}

model Message {
  id              Int          @id @default(autoincrement())
  content         String       @db.VarChar(300)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  sender_id       Int
  is_seen         Boolean      @default(false)
  conversation_id Int
  is_seen_by      Int[]        @default([])
  conversation    Conversation @relation("ConversationMessages", fields: [conversation_id], references: [id], onDelete: Cascade)
  senderUser      User         @relation("UserSentMessages", fields: [sender_id], references: [id])

  @@map("messages")
}

model Conversation {
  id           Int       @id @default(autoincrement())
  is_group     Boolean   @default(false)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @updatedAt @db.Timestamp(6)
  group_name   String    @db.VarChar(300)
  unread_count Int       @default(0)
  messages     Message[] @relation("ConversationMessages")
  participants User[]    @relation("UserConversations")

  @@map("conversations")
}

model Contact {
  id         Int      @id @default(autoincrement())
  user_id    Int
  contact_id Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  username   String?  @db.VarChar(54)
  contact    User     @relation("AsContacts", fields: [contact_id], references: [id])
  user       User     @relation("UserContacts", fields: [user_id], references: [id])

  @@unique([user_id, contact_id], map: "unique_contacts")
  @@map("contacts")
}
